     1                                  ; Hello world example
     2                                  
     3                                  section .data
     4                                  
     5                                  ; Output buffer length
     6                                  %define ql_out_buffer_len 512
     7                                  
     8                                  ; Buffer contents
     9 00000000 00<rep 200h>            ql_out_buffer: times ql_out_buffer_len db 0
    10                                  
    11                                  ; Current buffer length (< ql_out_buffer_len)
    12 00000200 0000000000000000        ql_out_buffer_current_len: dq 0
    13                                  
    14                                  ; Length of number print buffer
    15                                  %define ql_number_print_buffer_len 128
    16                                  
    17                                  ; Number formatting buffer (is ok to be 65, because it's not needed)
    18 00000208 00<rep 80h>             ql_number_print_buffer: times ql_number_print_buffer_len db 0
    19                                  
    20                                  ; a b c d e f g h i j k l m n o p q r s t u v w x y z
    21                                  ;   - - -                     -       -         -    
    22                                  
    23                                  ; Jump table. Maybe it's a bit..overweight.
    24                                  ql_print_fmt__jump_table: ; b..x values
    25 00000288 [7F00000000000000]      	dq ql_print_int_base2  ; b
    26 00000290 [5400000000000000]      	dq ql_print_char       ; c
    27 00000298 [F600000000000000]      	dq ql_print_int_base10 ; d
    28 000002A0 [0800000000000000]      	dq ql_empty_function
    29 000002A8 [9A01000000000000]      	dq ql_print_float      ; f
    30 000002B0 [0800000000000000]      	dq ql_empty_function
    31 000002B8 [0800000000000000]      	dq ql_empty_function
    32 000002C0 [0800000000000000]      	dq ql_empty_function
    33 000002C8 [0800000000000000]      	dq ql_empty_function
    34 000002D0 [0800000000000000]      	dq ql_empty_function
    35 000002D8 [0800000000000000]      	dq ql_empty_function
    36 000002E0 [0800000000000000]      	dq ql_empty_function
    37 000002E8 [0800000000000000]      	dq ql_empty_function
    38 000002F0 [BA00000000000000]      	dq ql_print_int_base8  ; o
    39 000002F8 [0800000000000000]      	dq ql_empty_function
    40 00000300 [0800000000000000]      	dq ql_empty_function
    41 00000308 [0800000000000000]      	dq ql_empty_function
    42 00000310 [F301000000000000]      	dq ql_print_str        ; s
    43 00000318 [0800000000000000]      	dq ql_empty_function
    44 00000320 [0800000000000000]      	dq ql_empty_function
    45 00000328 [0800000000000000]      	dq ql_empty_function
    46 00000330 [0800000000000000]      	dq ql_empty_function
    47 00000338 [5401000000000000]      	dq ql_print_int_base16 ; x
    48                                  
    49                                  ; Load floating-point arguments from xmm registers.
    50                                  ql_print_fmt_next_float__jump_table:
    51 00000340 [1C02000000000000]      	dq ql_print_fmt_next_float.from_xmm0
    52 00000348 [2302000000000000]      	dq ql_print_fmt_next_float.from_xmm1
    53 00000350 [2A02000000000000]      	dq ql_print_fmt_next_float.from_xmm2
    54 00000358 [3102000000000000]      	dq ql_print_fmt_next_float.from_xmm3
    55 00000360 [3802000000000000]      	dq ql_print_fmt_next_float.from_xmm4
    56 00000368 [3F02000000000000]      	dq ql_print_fmt_next_float.from_xmm5
    57 00000370 [4602000000000000]      	dq ql_print_fmt_next_float.from_xmm6
    58 00000378 [4D02000000000000]      	dq ql_print_fmt_next_float.from_xmm7
    59                                  
    60                                  section .text
    61                                  
    62                                  ; Expose library functions
    63                                  global ql_str_length
    64                                  global ql_flush
    65                                  global ql_print_char
    66                                  global ql_print_fmt
    67                                  global ql_print_str
    68                                  global ql_exit
    69                                  global ql_print_int_base2
    70                                  global ql_print_int_base8
    71                                  global ql_print_int_base10
    72                                  global ql_print_int_base16
    73                                  
    74                                  ; Exit from program
    75                                  ; CONV: SYSTEM-V 64
    76                                  ; IN:
    77                                  ;	exit code: RDI
    78                                  ql_exit:
    79 00000000 B83C000000              	mov rax, 60
    80 00000005 0F05                    	syscall
    81 00000007 C3                      	ret
    82                                  
    83                                  ; Does nothing
    84                                  ql_empty_function:
    85 00000008 C3                      	ret
    86                                  
    87                                  ; Flush output buffer
    88                                  ; CONV: SYSTEM-V 64
    89                                  ; USES:
    90                                  ;	RAX
    91                                  ;	RDI
    92                                  ;	RSI
    93                                  ;	RDX
    94                                  ql_flush:
    95 00000009 488B0425[00020000]      	mov rax, [ql_out_buffer_current_len]
    96                                  
    97                                  	; Omit empty flush)
    98 00000011 4885C0                  	test rax, rax
    99 00000014 7429                    	jz .end
   100                                  
   101                                  	; Display out buffer
   102 00000016 B801000000              	mov rax, 1
   103 0000001B BF01000000              	mov rdi, 1
   104 00000020 48BE-                   	mov rsi, ql_out_buffer
   104 00000022 [0000000000000000] 
   105 0000002A 488B1425[00020000]      	mov rdx, [ql_out_buffer_current_len]
   106 00000032 0F05                    	syscall
   107                                  
   108                                  	; Clear out buffer
   109 00000034 4831C0                  	xor rax, rax
   110 00000037 48890425[00020000]      	mov [ql_out_buffer_current_len], rax
   111                                  
   112                                  .end:
   113 0000003F C3                      	ret
   114                                  
   115                                  ; Calculate string length
   116                                  ; CONV: SYSTEM-V 64
   117                                  ; IN:
   118                                  ;	string ptr - RDI
   119                                  ; OUT:
   120                                  ;	RAX (= string length)
   121                                  ; USES:
   122                                  ;	RSI (= 0)
   123                                  ;	RDI (= _RDI)
   124                                  ql_str_length:
   125 00000040 4889F8                  	mov rax, rdi
   126                                  
   127                                  .continue:
   128 00000043 48FFC7                  	inc rdi
   129 00000046 408A37                  	mov sil, [rdi]
   130 00000049 4084F6                  	test sil, sil
   131 0000004C 75F5                    	jnz .continue
   132                                  
   133 0000004E 4897                    	xchg rdi, rax
   134 00000050 4829F8                  	sub rax, rdi
   135 00000053 C3                      	ret
   136                                  
   137                                  ; My putchar function
   138                                  ; CONV: SYSTEM-V 64
   139                                  ; IN:
   140                                  ;	character to print - DIL
   141                                  ; USES:
   142                                  ;	R8
   143                                  ;	DIL
   144                                  ql_print_char:
   145                                  	; bl - char to print - lower byte of RDI register.
   146 00000054 4C8B0425[00020000]      	mov r8, [ql_out_buffer_current_len]
   147                                  
   148                                  	; Flush output buffer if it's filled
   149 0000005C 4981F800020000          	cmp r8, ql_out_buffer_len
   150 00000063 720B                    	jb .no_flush
   151                                  
   152                                  	; It's very infrequent, so it's ok to do this here
   153 00000065 50                      	push rax
   154 00000066 56                      	push rsi
   155 00000067 52                      	push rdx
   156 00000068 E89CFFFFFF              	call ql_flush
   157 0000006D 5A                      	pop rdx
   158 0000006E 5E                      	pop rsi
   159 0000006F 58                      	pop rax
   160                                  
   161                                  .no_flush:
   162 00000070 4188B8[00000000]        	mov [r8 + ql_out_buffer], dil
   163 00000077 FF0425[00020000]        	inc dword [ql_out_buffer_current_len]
   164 0000007E C3                      	ret
   165                                  
   166                                  ; Print binary integer
   167                                  ; CONV: SYSTEM-V 64
   168                                  ; IN:
   169                                  ;	number to print - RDI
   170                                  ; USES:
   171                                  ;	RAX
   172                                  ;	RDI
   173                                  ;	RSI
   174                                  ;	R8
   175                                  ql_print_int_base2:
   176 0000007F 4889F8                  	mov rax, rdi
   177 00000082 48BF-                   	mov rdi, ql_number_print_buffer + ql_number_print_buffer_len - 1
   177 00000084 [8702000000000000] 
   178                                  
   179 0000008C 4885C0                  	test rax, rax
   180 0000008F 750A                    	jnz .continue
   181                                  
   182                                  	; handle zero case
   183 00000091 48FFCF                  	dec rdi
   184 00000094 BF30000000              	mov rdi, 30h
   185 00000099 EB19                    	jmp .end
   186                                  
   187                                  .continue:
   188 0000009B 4889C6                  	mov rsi, rax
   189 0000009E 4883E601                	and rsi, 1
   190 000000A2 4883C630                	add rsi, 30h
   191                                  
   192 000000A6 48FFCF                  	dec rdi
   193 000000A9 408837                  	mov [rdi], sil
   194                                  
   195 000000AC 48D1E8                  	shr rax, 1
   196                                  
   197 000000AF 4885C0                  	test rax, rax
   198 000000B2 75E7                    	jnz .continue
   199                                  
   200                                  .end:
   201 000000B4 E83A010000              	call ql_print_str
   202 000000B9 C3                      	ret
   203                                  
   204                                  ; Print binary integer
   205                                  ; CONV: SYSTEM-V 64
   206                                  ; IN:
   207                                  ;	number to print - RDI
   208                                  ; USES:
   209                                  ;	RAX
   210                                  ;	RDI
   211                                  ;	RSI
   212                                  ;	R8
   213                                  ql_print_int_base8:
   214 000000BA 4889F8                  	mov rax, rdi
   215 000000BD 48BF-                   	mov rdi, ql_number_print_buffer + ql_number_print_buffer_len - 1
   215 000000BF [8702000000000000] 
   216                                  
   217 000000C7 4885C0                  	test rax, rax
   218 000000CA 750A                    	jnz .continue
   219                                  
   220                                  	; handle zero case
   221 000000CC 48FFCF                  	dec rdi
   222 000000CF BF30000000              	mov rdi, 30h
   223 000000D4 EB1A                    	jmp .end
   224                                  
   225                                  .continue:
   226 000000D6 4889C6                  	mov rsi, rax
   227 000000D9 4883E607                	and rsi, 7
   228 000000DD 4883C630                	add rsi, 30h
   229                                  
   230 000000E1 48FFCF                  	dec rdi
   231 000000E4 408837                  	mov [rdi], sil
   232                                  
   233 000000E7 48C1E803                	shr rax, 3
   234                                  
   235 000000EB 4885C0                  	test rax, rax
   236 000000EE 75E6                    	jnz .continue
   237                                  
   238                                  .end:
   239 000000F0 E8FE000000              	call ql_print_str
   240 000000F5 C3                      	ret
   241                                  
   242                                  ; Print binary integer
   243                                  ; CONV: SYSTEM-V 64
   244                                  ; IN:
   245                                  ;	number to print - RDI
   246                                  ; USES:
   247                                  ;	RAX
   248                                  ;	RDX
   249                                  ;	RDI
   250                                  ;	RSI
   251                                  ;	R8
   252                                  ql_print_int_base10:
   253 000000F6 4831D2                  	xor rdx, rdx
   254                                  
   255 000000F9 57                      	push rdi
   256                                  
   257 000000FA 4889F8                  	mov rax, rdi
   258 000000FD 48BF-                   	mov rdi, ql_number_print_buffer + ql_number_print_buffer_len - 1
   258 000000FF [8702000000000000] 
   259                                  
   260 00000107 4885C0                  	test rax, rax
   261 0000010A 7508                    	jnz .nonzero
   262                                  
   263 0000010C 48FFCF                  	dec rdi
   264 0000010F C60730                  	mov byte [rdi], 0x30
   265 00000112 EB3A                    	jmp .end
   266                                  
   267                                  .nonzero:
   268                                  
   269                                  	; Negate rax if it is negative
   270 00000114 4883F800                	cmp rax, 0
   271 00000118 7F03                    	jg .continue
   272 0000011A 48F7D8                  	neg rax
   273                                  
   274                                  .continue:
   275 0000011D 41B80A000000            	mov r8, 0xA
   276                                  
   277 00000123 4889C6                  	mov rsi, rax
   278 00000126 49F7F8                  	idiv r8
   279 00000129 49F7E8                  	imul r8
   280 0000012C 4829C6                  	sub rsi, rax
   281 0000012F 49F7F8                  	idiv r8
   282                                  
   283 00000132 4883C630                	add rsi, 0x30
   284                                  
   285 00000136 48FFCF                  	dec rdi
   286 00000139 408837                  	mov [rdi], sil
   287                                  
   288                                  .test:
   289 0000013C 4885C0                  	test rax, rax
   290 0000013F 75DC                    	jnz .continue
   291                                  
   292 00000141 58                      	pop rax
   293 00000142 4883F800                	cmp rax, 0
   294 00000146 7D06                    	jge .end
   295                                  
   296                                  	; Write '-' character
   297 00000148 48FFCF                  	dec rdi
   298 0000014B C6072D                  	mov byte [rdi], 0x2D
   299                                  
   300                                  .end:
   301                                  	; Print string in r10
   302 0000014E E8A0000000              	call ql_print_str
   303 00000153 C3                      	ret
   304                                  
   305                                  ; Print binary integer
   306                                  ; CONV: SYSTEM-V 64
   307                                  ; IN:
   308                                  ;	number to print - RDI
   309                                  ; USES:
   310                                  ;	RAX
   311                                  ;	RDI
   312                                  ;	RSI
   313                                  ;	R8
   314                                  ql_print_int_base16:
   315 00000154 4889F8                  	mov rax, rdi
   316 00000157 48BF-                   	mov rdi, ql_number_print_buffer + ql_number_print_buffer_len - 1
   316 00000159 [8702000000000000] 
   317                                  
   318 00000161 4885C0                  	test rax, rax
   319 00000164 750A                    	jnz .continue
   320                                  
   321                                  	; handle zero case
   322 00000166 48FFCF                  	dec rdi
   323 00000169 BF30000000              	mov rdi, 30h
   324 0000016E EB24                    	jmp .end
   325                                  
   326                                  .continue:
   327 00000170 4889C6                  	mov rsi, rax
   328                                  
   329                                  	; Perform bit more clever
   330 00000173 4883E60F                	and rsi, 0xF
   331                                  
   332 00000177 4883FE0A                	cmp rsi, 0xA
   333 0000017B 7C04                    	jl .number
   334 0000017D 4883C607                	add rsi, 0x7
   335                                  .number:
   336 00000181 4883C630                	add rsi, 30h
   337                                  
   338 00000185 48FFCF                  	dec rdi
   339 00000188 408837                  	mov [rdi], sil
   340                                  
   341 0000018B 48C1E804                	shr rax, 4
   342 0000018F 4885C0                  	test rax, rax
   343 00000192 75DC                    	jnz .continue
   344                                  
   345                                  .end:
   346 00000194 E85A000000              	call ql_print_str
   347 00000199 C3                      	ret
   348                                  
   349                                  ; Print float (alias to ql_print_int_base16 now)
   350                                  ; IN:
   351                                  ;	number to print - rdi
   352                                  ; TODO:
   353                                  ;	BUILD ACTUAL FLOAT PRINTING FUNCTION
   354                                  ql_print_float:
   355 0000019A 66480F6EC7              	movq xmm0, rdi
   356 0000019F E8B0FFFFFF              	call ql_print_int_base16
   357 000001A4 C3                      	ret
   358                                  
   359                                  ; Print string (new implementation)
   360                                  ; CONV: SYSTEM-V 64
   361                                  ; IN:
   362                                  ;	string to print (null-terminated) - RDI
   363                                  ; USES:
   364                                  ;	???
   365                                  ql_print_str_2:
   366                                  	; Calculate string length
   367 000001A5 E896FEFFFF              	call ql_str_length
   368                                  
   369                                  	; Check if input string is longer, than input buffer. In this case, it's better to output it with systemcall only.
   370 000001AA 483D00020000            	cmp rax, ql_out_buffer_len
   371 000001B0 7D29                    	jge .very_long_str
   372                                  
   373                                  	; Read rest length of current buffer
   374 000001B2 BB00020000              	mov rbx, ql_out_buffer_len
   375 000001B7 482B1C25[00020000]      	sub rbx, [ql_out_buffer_current_len]
   376                                  
   377                                  	; Compare output length with rbx
   378 000001BF 4839C3                  	cmp rbx, rax
   379                                  
   380                                  	; If rest of buffer is equal
   381 000001C2 7F00                    	jg .write
   382                                  
   383                                  .write:
   384                                  
   385 000001C4 4831C3                  	xor rbx, rax
   386 000001C7 7511                    	jnz .end
   387                                  
   388                                  	; Fill
   389 000001C9 48C70425[00020000]-     	mov qword [ql_out_buffer_current_len], ql_out_buffer_len
   389 000001D1 00020000           
   390                                  	; Flush current buffer
   391 000001D5 E82FFEFFFF              	call ql_flush
   392                                  
   393                                  .end:
   394 000001DA C3                      	ret
   395                                  
   396                                  .very_long_str:
   397                                  	; TODO: Save registers
   398                                  
   399                                  	; Flush input buffer
   400 000001DB E829FEFFFF              	call ql_flush
   401                                  
   402                                  	; Display input string with systemcall only.
   403 000001E0 4889C2                  	mov rdx, rax
   404 000001E3 4889FE                  	mov rsi, rdi
   405 000001E6 B801000000              	mov rax, 1
   406 000001EB BF01000000              	mov rdi, 1
   407 000001F0 0F05                    	syscall
   408                                  
   409 000001F2 C3                      	ret
   410                                  
   411                                  ; Print strnig
   412                                  ; CONV: SYSTEM-V 64
   413                                  ; IN:
   414                                  ;	string to print (null-terminated) - RDI
   415                                  ; USES:
   416                                  ;	RSI
   417                                  ;	RDI
   418                                  ;	R8
   419                                  ; TODO:
   420                                  ;	REWRITE THIS SH*T
   421                                  ql_print_str:
   422                                  	; RAX = string length
   423 000001F3 E848FEFFFF              	call ql_str_length
   424                                  
   425 000001F8 4889FE                  	mov rsi, rdi
   426 000001FB EB05                    	jmp .test
   427                                  
   428                                  .continue:
   429 000001FD E852FEFFFF              	call ql_print_char
   430                                  .test:
   431 00000202 408A3E                  	mov dil, [rsi]
   432 00000205 48FFC6                  	inc rsi
   433 00000208 4084FF                  	test dil, dil
   434 0000020B 75F0                    	jnz .continue
   435                                  
   436 0000020D C3                      	ret
   437                                  
   438                                  ; Get next float-point parameter
   439                                  ; IN:
   440                                  ;	float index - R9
   441                                  ; OUT:
   442                                  ;	float value - RDI
   443                                  ql_print_fmt_next_float:
   444 0000020E 4983F908                	cmp r9, 8
   445 00000212 7D40                    	jge .from_stack
   446                                  
   447 00000214 42FF24CD[40030000]      	jmp [r9 * 8 + ql_print_fmt_next_float__jump_table]
   448                                  .from_xmm0:
   449 0000021C 66480F7EC7              	movq rdi, xmm0
   450 00000221 EB42                    	jmp .end
   451                                  .from_xmm1:
   452 00000223 66480F7ECF              	movq rdi, xmm1
   453 00000228 EB3B                    	jmp .end
   454                                  .from_xmm2:
   455 0000022A 66480F7ED7              	movq rdi, xmm2
   456 0000022F EB34                    	jmp .end
   457                                  .from_xmm3:
   458 00000231 66480F7EDF              	movq rdi, xmm3
   459 00000236 EB2D                    	jmp .end
   460                                  .from_xmm4:
   461 00000238 66480F7EE7              	movq rdi, xmm4
   462 0000023D EB26                    	jmp .end
   463                                  .from_xmm5:
   464 0000023F 66480F7EEF              	movq rdi, xmm5
   465 00000244 EB1F                    	jmp .end
   466                                  .from_xmm6:
   467 00000246 66480F7EF7              	movq rdi, xmm6
   468 0000024B EB18                    	jmp .end
   469                                  .from_xmm7:
   470 0000024D 66480F7EFF              	movq rdi, xmm7
   471 00000252 EB11                    	jmp .end
   472                                  
   473                                  .from_stack:
   474 00000254 49C1E103                	shl r9, 3
   475 00000258 4889E7                  	mov rdi, rsp
   476 0000025B 4C01CF                  	add rdi, r9
   477 0000025E 49C1E903                	shr r9, 3
   478                                  	; load froms tack
   479 00000262 488B3F                  	mov rdi, [rdi]
   480                                  	
   481                                  .end:
   482                                  
   483 00000265 C3                      	ret
   484                                  
   485                                  ; My formatted print function
   486                                  ; CONV: SYSTEM-V
   487                                  ; IN:
   488                                  ;	format string - rdi
   489                                  ; USES:
   490                                  ;	...
   491                                  ql_print_fmt:
   492                                  	; Save stack value
   493 00000266 4989E2                  	mov r10, rsp
   494                                  
   495                                  	; Load return pointer from stack
   496 00000269 58                      	pop rax
   497                                  
   498                                  	; Write registers to stack
   499 0000026A 4151                    	push r9
   500 0000026C 4150                    	push r8
   501 0000026E 51                      	push rcx
   502 0000026F 52                      	push rdx
   503 00000270 56                      	push rsi
   504                                  
   505                                  	; Save return pointer and initial stack address
   506 00000271 4152                    	push r10
   507 00000273 50                      	push rax
   508                                  
   509                                  	; R9 - float point index
   510 00000274 4D31C9                  	xor r9, r9
   511                                  
   512                                  	; R10 - string pointer
   513 00000277 4989FA                  	mov r10, rdi
   514                                  
   515                                  	; R11 - current argument pointer
   516 0000027A 4989E3                  	mov r11, rsp
   517 0000027D 4983C308                	add r11, 8
   518                                  
   519                                  .main_loop:
   520                                  	; AL = *R10
   521 00000281 418A02                  	mov al, [r10]
   522 00000284 49FFC2                  	inc r10
   523                                  
   524                                  	; Test for stirng end
   525 00000287 84C0                    	test al, al
   526 00000289 7445                    	jz .end
   527                                  
   528                                  	; Go to '%' handler.
   529 0000028B 3C25                    	cmp al, 25h
   530 0000028D 740A                    	je .handle_fmt
   531                                  
   532                                  .print_char:
   533                                  
   534                                  	; Further optimization?
   535 0000028F 4088C7                  	mov dil, al
   536 00000292 E8BDFDFFFF              	call ql_print_char
   537                                  
   538                                  	; Print character
   539 00000297 EBE8                    	jmp .main_loop
   540                                  
   541                                  .handle_fmt:
   542                                  
   543                                  	; %c, %s, %d, %x, %o, %b, %%
   544                                  	; a b c d e f g h i j k l m n o p q r s t u v w x y z
   545                                  	;   - - -                     -       -         -    
   546                                  	; b..x jump table
   547                                  
   548                                  	; Load character into RAX
   549 00000299 4831C0                  	xor rax, rax
   550 0000029C 418A02                  	mov al, [r10]
   551 0000029F 49FFC2                  	inc r10
   552                                  
   553                                  	; Test for lack of next character
   554 000002A2 84C0                    	test al, al
   555 000002A4 742A                    	jz .end
   556                                  
   557                                  	; Test for "%%" combination
   558 000002A6 3C25                    	cmp al, 0x25
   559 000002A8 74E5                    	je .print_char
   560                                  
   561                                  	; Test for validness to be used with jump table
   562 000002AA 3C62                    	cmp al, 0x62
   563 000002AC 72D3                    	jb .main_loop
   564 000002AE 3C78                    	cmp al, 0x78
   565 000002B0 77CF                    	ja .main_loop
   566                                  
   567 000002B2 3C66                    	cmp al, 0x66
   568 000002B4 750A                    	jne .load_arg_stack
   569                                  
   570                                  	; Load next float
   571 000002B6 E853FFFFFF              	call ql_print_fmt_next_float
   572 000002BB 49FFC1                  	inc r9
   573                                  
   574 000002BE EB07                    	jmp .call
   575                                  
   576                                  .load_arg_stack:
   577                                  	; Load next argument into rcx
   578 000002C0 4983C308                	add r11, 8
   579 000002C4 498B3B                  	mov rdi, [r11]
   580                                  .call:
   581                                  
   582                                  	; Use jump table!
   583 000002C7 FF14C5[78FFFFFF]        	call [rax * 8 + ql_print_fmt__jump_table - 62h * 8]
   584 000002CE EBB1                    	jmp .main_loop
   585                                  
   586                                  .end:
   587                                  
   588                                  	; Restore stack
   589 000002D0 58                      	pop rax
   590 000002D1 5C                      	pop rsp
   591 000002D2 50                      	push rax
   592                                  
   593 000002D3 C3                      	ret
