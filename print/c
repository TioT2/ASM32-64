     1                                  ; Hello world example
     2                                  
     3                                  section .data
     4                                  
     5                                  ; Output buffer
     6                                  %define ql_out_buffer_len 256
     7 00000000 00<rep 100h>            ql_out_buffer: times ql_out_buffer_len db 0
     8 00000100 0000000000000000        ql_out_buffer_current_len: dq 0
     9                                  
    10                                  ; Number formatting buffer
    11 00000108 00<rep 41h>             ql_number_print_buffer: times 65 db 0
    12                                  
    13                                  ; a b c d e f g h i j k l m n o p q r s t u v w x y z
    14                                  ;   - - -                     -       -         -    
    15                                  
    16                                  ; Jump table. Maybe it's a bit..overweight.
    17                                  ql_print_fmt__jump_table: ; b..x values
    18 00000149 [7900000000000000]      	dq ql_print_int_base2  ; b
    19 00000151 [5400000000000000]      	dq ql_print_char       ; c
    20 00000159 [F000000000000000]      	dq ql_print_int_base10 ; d
    21 00000161 [0800000000000000]      	dq ql_empty_function
    22 00000169 [0800000000000000]      	dq ql_empty_function
    23 00000171 [0800000000000000]      	dq ql_empty_function
    24 00000179 [0800000000000000]      	dq ql_empty_function
    25 00000181 [0800000000000000]      	dq ql_empty_function
    26 00000189 [0800000000000000]      	dq ql_empty_function
    27 00000191 [0800000000000000]      	dq ql_empty_function
    28 00000199 [0800000000000000]      	dq ql_empty_function
    29 000001A1 [0800000000000000]      	dq ql_empty_function
    30 000001A9 [0800000000000000]      	dq ql_empty_function
    31 000001B1 [B400000000000000]      	dq ql_print_int_base8  ; o
    32 000001B9 [0800000000000000]      	dq ql_empty_function
    33 000001C1 [0800000000000000]      	dq ql_empty_function
    34 000001C9 [0800000000000000]      	dq ql_empty_function
    35 000001D1 [9401000000000000]      	dq ql_print_str        ; s
    36 000001D9 [0800000000000000]      	dq ql_empty_function
    37 000001E1 [0800000000000000]      	dq ql_empty_function
    38 000001E9 [0800000000000000]      	dq ql_empty_function
    39 000001F1 [0800000000000000]      	dq ql_empty_function
    40 000001F9 [4E01000000000000]      	dq ql_print_int_base16 ; x
    41                                  
    42                                  section .text
    43                                  
    44                                  ; Expose library functions
    45                                  global ql_str_length
    46                                  global ql_flush
    47                                  global ql_print_char
    48                                  global ql_print_fmt
    49                                  global ql_print_str
    50                                  global ql_exit
    51                                  global ql_print_int_base2
    52                                  global ql_print_int_base8
    53                                  global ql_print_int_base10
    54                                  global ql_print_int_base16
    55                                  
    56                                  ; Exit from program
    57                                  ; CONV: SYSTEM-V 64
    58                                  ; IN:
    59                                  ;	exit code: RDI
    60                                  ql_exit:
    61 00000000 B83C000000              	mov rax, 60
    62 00000005 0F05                    	syscall
    63 00000007 C3                      	ret
    64                                  
    65                                  ; Does nothing
    66                                  ql_empty_function:
    67 00000008 C3                      	ret
    68                                  
    69                                  ; Flush output buffer
    70                                  ; CONV: SYSTEM-V 64
    71                                  ql_flush:
    72 00000009 488B0425[00010000]      	mov rax, [ql_out_buffer_current_len]
    73                                  
    74                                  	; Omit empty flush)
    75 00000011 4885C0                  	test rax, rax
    76 00000014 7429                    	jz .end
    77                                  
    78                                  	; Display out buffer
    79 00000016 B801000000              	mov rax, 1
    80 0000001B BF01000000              	mov rdi, 1
    81 00000020 48BE-                   	mov rsi, ql_out_buffer
    81 00000022 [0000000000000000] 
    82 0000002A 488B1425[00010000]      	mov rdx, [ql_out_buffer_current_len]
    83 00000032 0F05                    	syscall
    84                                  
    85                                  	; Clear out buffer
    86 00000034 4831C0                  	xor rax, rax
    87 00000037 48890425[00010000]      	mov [ql_out_buffer_current_len], rax
    88                                  
    89                                  .end:
    90 0000003F C3                      	ret
    91                                  
    92                                  ; Calculate string length
    93                                  ; CONV: SYSTEM-V 64
    94                                  ; IN:
    95                                  ;	string ptr - RDI
    96                                  ; OUT:
    97                                  ;	RAX (= string length)
    98                                  ; USES:
    99                                  ;	RSI (= 0)
   100                                  ;	RDI (= _RDI)
   101                                  ql_str_length:
   102 00000040 4889F8                  	mov rax, rdi
   103                                  
   104                                  .continue:
   105 00000043 48FFC7                  	inc rdi
   106 00000046 408A37                  	mov sil, [rdi]
   107 00000049 4084F6                  	test sil, sil
   108 0000004C 75F5                    	jnz .continue
   109                                  
   110 0000004E 4897                    	xchg rdi, rax
   111 00000050 4829F8                  	sub rax, rdi
   112 00000053 C3                      	ret
   113                                  
   114                                  ; My putchar function
   115                                  ; CONV: SYSTEM-V 64
   116                                  ; IN:
   117                                  ;	character to print - DIL
   118                                  ; USES:
   119                                  ;	R8
   120                                  ql_print_char:
   121                                  	; bl - char to print - lower byte of RDI register.
   122 00000054 4C8B0425[00010000]      	mov r8, [ql_out_buffer_current_len]
   123                                  
   124                                  	; Flush output buffer if it's filled
   125 0000005C 4981F800010000          	cmp r8, ql_out_buffer_len
   126 00000063 7205                    	jb .no_flush
   127 00000065 E89FFFFFFF              	call ql_flush
   128                                  .no_flush:
   129 0000006A 4188B8[00000000]        	mov [r8 + ql_out_buffer], dil
   130 00000071 FF0425[00010000]        	inc dword [ql_out_buffer_current_len]
   131 00000078 C3                      	ret
   132                                  
   133                                  ; Print binary integer
   134                                  ; CONV: SYSTEM-V 64
   135                                  ; IN:
   136                                  ;	number to print - RDI
   137                                  ql_print_int_base2:
   138 00000079 4889F8                  	mov rax, rdi
   139 0000007C 48BF-                   	mov rdi, ql_number_print_buffer + 64
   139 0000007E [4801000000000000] 
   140                                  
   141 00000086 4885C0                  	test rax, rax
   142 00000089 750A                    	jnz .continue
   143                                  
   144                                  	; handle zero case
   145 0000008B 48FFCF                  	dec rdi
   146 0000008E BF30000000              	mov rdi, 30h
   147 00000093 EB19                    	jmp .end
   148                                  
   149                                  .continue:
   150 00000095 4889C6                  	mov rsi, rax
   151 00000098 4883E601                	and rsi, 1
   152 0000009C 4883C630                	add rsi, 30h
   153                                  
   154 000000A0 48FFCF                  	dec rdi
   155 000000A3 408837                  	mov [rdi], sil
   156                                  
   157 000000A6 48D1E8                  	shr rax, 1
   158                                  
   159 000000A9 4885C0                  	test rax, rax
   160 000000AC 75E7                    	jnz .continue
   161                                  
   162                                  .end:
   163 000000AE E8E1000000              	call ql_print_str
   164 000000B3 C3                      	ret
   165                                  
   166                                  ; Print binary integer
   167                                  ; CONV: SYSTEM-V 64
   168                                  ; IN:
   169                                  ;	number to print - RDI
   170                                  ql_print_int_base8:
   171 000000B4 4889F8                  	mov rax, rdi
   172 000000B7 48BF-                   	mov rdi, ql_number_print_buffer + 64
   172 000000B9 [4801000000000000] 
   173                                  
   174 000000C1 4885C0                  	test rax, rax
   175 000000C4 750A                    	jnz .continue
   176                                  
   177                                  	; handle zero case
   178 000000C6 48FFCF                  	dec rdi
   179 000000C9 BF30000000              	mov rdi, 30h
   180 000000CE EB1A                    	jmp .end
   181                                  
   182                                  .continue:
   183 000000D0 4889C6                  	mov rsi, rax
   184 000000D3 4883E607                	and rsi, 7
   185 000000D7 4883C630                	add rsi, 30h
   186                                  
   187 000000DB 48FFCF                  	dec rdi
   188 000000DE 408837                  	mov [rdi], sil
   189                                  
   190 000000E1 48C1E803                	shr rax, 3
   191                                  
   192 000000E5 4885C0                  	test rax, rax
   193 000000E8 75E6                    	jnz .continue
   194                                  
   195                                  .end:
   196 000000EA E8A5000000              	call ql_print_str
   197 000000EF C3                      	ret
   198                                  
   199                                  ; Print binary integer
   200                                  ; CONV: SYSTEM-V 64
   201                                  ; IN:
   202                                  ;	number to print - RDI
   203                                  ql_print_int_base10:
   204 000000F0 4831D2                  	xor rdx, rdx
   205                                  
   206 000000F3 57                      	push rdi
   207                                  
   208 000000F4 4889F8                  	mov rax, rdi
   209 000000F7 48BF-                   	mov rdi, ql_number_print_buffer + 64
   209 000000F9 [4801000000000000] 
   210                                  
   211 00000101 4885C0                  	test rax, rax
   212 00000104 7508                    	jnz .nonzero
   213                                  
   214 00000106 48FFCF                  	dec rdi
   215 00000109 C60730                  	mov byte [rdi], 0x30
   216 0000010C EB3A                    	jmp .end
   217                                  
   218                                  .nonzero:
   219                                  
   220                                  	; Negate rax if it is negative
   221 0000010E 4883F800                	cmp rax, 0
   222 00000112 7F03                    	jg .continue
   223 00000114 48F7D8                  	neg rax
   224                                  
   225                                  .continue:
   226 00000117 41B80A000000            	mov r8, 0xA
   227                                  
   228 0000011D 4889C6                  	mov rsi, rax
   229 00000120 49F7F8                  	idiv r8
   230 00000123 49F7E8                  	imul r8
   231 00000126 4829C6                  	sub rsi, rax
   232 00000129 49F7F8                  	idiv r8
   233                                  
   234 0000012C 4883C630                	add rsi, 0x30
   235                                  
   236 00000130 48FFCF                  	dec rdi
   237 00000133 408837                  	mov [rdi], sil
   238                                  
   239                                  .test:
   240 00000136 4885C0                  	test rax, rax
   241 00000139 75DC                    	jnz .continue
   242                                  
   243 0000013B 58                      	pop rax
   244 0000013C 4883F800                	cmp rax, 0
   245 00000140 7D06                    	jge .end
   246                                  
   247                                  	; Write '-' character
   248 00000142 48FFCF                  	dec rdi
   249 00000145 C6072D                  	mov byte [rdi], 0x2D
   250                                  
   251                                  .end:
   252                                  	; Print string in r10
   253 00000148 E847000000              	call ql_print_str
   254 0000014D C3                      	ret
   255                                  
   256                                  ; Print binary integer
   257                                  ; CONV: SYSTEM-V 64
   258                                  ; IN:
   259                                  ;	number to print - RDI
   260                                  ql_print_int_base16:
   261 0000014E 4889F8                  	mov rax, rdi
   262 00000151 48BF-                   	mov rdi, ql_number_print_buffer + 64
   262 00000153 [4801000000000000] 
   263                                  
   264 0000015B 4885C0                  	test rax, rax
   265 0000015E 750A                    	jnz .continue
   266                                  
   267                                  	; handle zero case
   268 00000160 48FFCF                  	dec rdi
   269 00000163 BF30000000              	mov rdi, 30h
   270 00000168 EB24                    	jmp .end
   271                                  
   272                                  .continue:
   273 0000016A 4889C6                  	mov rsi, rax
   274                                  
   275                                  	; Perform bit more clever
   276 0000016D 4883E60F                	and rsi, 0xF
   277                                  
   278 00000171 4883FE0A                	cmp rsi, 0xA
   279 00000175 7C04                    	jl .number
   280 00000177 4883C607                	add rsi, 0x7
   281                                  .number:
   282 0000017B 4883C630                	add rsi, 30h
   283                                  
   284 0000017F 48FFCF                  	dec rdi
   285 00000182 408837                  	mov [rdi], sil
   286                                  
   287 00000185 48C1E804                	shr rax, 4
   288 00000189 4885C0                  	test rax, rax
   289 0000018C 75DC                    	jnz .continue
   290                                  
   291                                  .end:
   292 0000018E E801000000              	call ql_print_str
   293 00000193 C3                      	ret
   294                                  
   295                                  ; Print strnig
   296                                  ; CONV: SYSTEM-V 64
   297                                  ; IN:
   298                                  ;	string to print (null-terminated) - RDI
   299                                  ;
   300                                  ; TODO: REWRITE THIS SH*T
   301                                  ql_print_str:
   302                                  	; RAX = string length
   303 00000194 E8A7FEFFFF              	call ql_str_length
   304                                  
   305 00000199 4889FE                  	mov rsi, rdi
   306 0000019C EB05                    	jmp .test
   307                                  
   308                                  .continue:
   309 0000019E E8B1FEFFFF              	call ql_print_char
   310                                  .test:
   311 000001A3 408A3E                  	mov dil, [rsi]
   312 000001A6 48FFC6                  	inc rsi
   313 000001A9 4084FF                  	test dil, dil
   314 000001AC 75F0                    	jnz .continue
   315                                  
   316 000001AE C3                      	ret
   317                                  
   318                                  ; My formatted print function
   319                                  ql_print_fmt:
   320                                  	; Save stack value
   321 000001AF 4989E2                  	mov r10, rsp
   322                                  
   323                                  	; Load return pointer from stack
   324 000001B2 58                      	pop rax
   325                                  
   326                                  	; Write registers to stack
   327 000001B3 4151                    	push r9
   328 000001B5 4150                    	push r8
   329 000001B7 51                      	push rcx
   330 000001B8 52                      	push rdx
   331 000001B9 56                      	push rsi
   332                                  
   333                                  	; Save return pointer and initial stack address
   334 000001BA 4152                    	push r10
   335 000001BC 50                      	push rax
   336                                  
   337                                  	; R10 - string pointer
   338 000001BD 4989FA                  	mov r10, rdi
   339                                  
   340                                  	; R11 - current argument pointer
   341 000001C0 4989E3                  	mov r11, rsp
   342 000001C3 4983C308                	add r11, 8
   343                                  
   344                                  .main_loop:
   345                                  	; AL = *RDI
   346 000001C7 418A02                  	mov al, [r10]
   347 000001CA 49FFC2                  	inc r10
   348                                  
   349                                  	; Test for stirng end
   350 000001CD 84C0                    	test al, al
   351 000001CF 7437                    	jz .end
   352                                  
   353                                  	; Go to '%' handler.
   354 000001D1 3C25                    	cmp al, 25h
   355 000001D3 740A                    	je .handle_fmt
   356                                  
   357                                  .print_char:
   358                                  
   359                                  	; Further optimization?
   360 000001D5 4088C7                  	mov dil, al
   361 000001D8 E877FEFFFF              	call ql_print_char
   362                                  
   363                                  	; Print character
   364 000001DD EBE8                    	jmp .main_loop
   365                                  
   366                                  .handle_fmt:
   367                                  
   368                                  	; %c, %s, %d, %x, %o, %b, %%
   369                                  	; a b c d e f g h i j k l m n o p q r s t u v w x y z
   370                                  	;   - - -                     -       -         -    
   371                                  	; b..x jump table
   372                                  
   373                                  	; Load character into RAX
   374 000001DF 4831C0                  	xor rax, rax
   375 000001E2 418A02                  	mov al, [r10]
   376 000001E5 49FFC2                  	inc r10
   377                                  
   378                                  	; Test for lack of next character
   379 000001E8 84C0                    	test al, al
   380 000001EA 741C                    	jz .end
   381                                  
   382                                  	; Test for "%%" combination
   383 000001EC 3C25                    	cmp al, 25h
   384 000001EE 74E5                    	je .print_char
   385                                  
   386                                  	; Test for validness to be used with jump table
   387 000001F0 3C62                    	cmp al, 62h
   388 000001F2 72D3                    	jb .main_loop
   389 000001F4 3C78                    	cmp al, 78h
   390 000001F6 77CF                    	ja .main_loop
   391                                  
   392                                  	; Load next argument into rcx
   393 000001F8 4983C308                	add r11, 8
   394 000001FC 498B3B                  	mov rdi, [r11]
   395                                  
   396                                  	; Use jump table!
   397 000001FF FF14C5[39FEFFFF]        	call [rax * 8 + ql_print_fmt__jump_table - 62h * 8]
   398 00000206 EBBF                    	jmp .main_loop
   399                                  
   400                                  .end:
   401                                  
   402                                  	; Restore stack
   403 00000208 58                      	pop rax
   404 00000209 5C                      	pop rsp
   405 0000020A 50                      	push rax
   406                                  
   407 0000020B C3                      	ret
