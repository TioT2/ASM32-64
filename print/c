     1                                  ; QuickLibrary implementation file
     2                                  
     3                                  section .data
     4                                  
     5                                  ; Output buffer length
     6                                  %define ql_out_buffer_len 512
     7                                  
     8                                  ; Buffer contents
     9 00000000 00<rep 200h>            ql_out_buffer: times ql_out_buffer_len db 0
    10                                  
    11                                  ; Buffer end pointer
    12                                  ql_out_buffer_end:
    13                                  
    14                                  ; Current buffer length (< ql_out_buffer_len)
    15 00000200 0000000000000000        ql_out_buffer_current_len: dq 0
    16                                  
    17                                  ; Length of number print buffer
    18                                  %define ql_number_print_buffer_len 128
    19                                  
    20                                  ; Number formatting buffer
    21 00000208 00<rep 80h>             ql_number_print_buffer: times ql_number_print_buffer_len db 0
    22                                  
    23                                  ; a b c d e f g h i j k l m n o p q r s t u v w x y z
    24                                  ;   - - -                     -       -         -    
    25                                  
    26                                  ; Jump table. Maybe it's a bit..overweight.
    27                                  ql_print_fmt__jump_table: ; b..x values
    28 00000288 [7F00000000000000]      	dq ql_print_int_base2  ; b
    29 00000290 [5400000000000000]      	dq ql_print_char       ; c
    30 00000298 [4B01000000000000]      	dq ql_print_int_base10 ; d
    31 000002A0 [0800000000000000]      	dq ql_empty_function
    32 000002A8 [9A01000000000000]      	dq ql_print_float      ; f
    33 000002B0 [0800000000000000]      	dq ql_empty_function
    34 000002B8 [0800000000000000]      	dq ql_empty_function
    35 000002C0 [0800000000000000]      	dq ql_empty_function
    36 000002C8 [0800000000000000]      	dq ql_empty_function
    37 000002D0 [0800000000000000]      	dq ql_empty_function
    38 000002D8 [0800000000000000]      	dq ql_empty_function
    39 000002E0 [0800000000000000]      	dq ql_empty_function
    40 000002E8 [0800000000000000]      	dq ql_empty_function
    41 000002F0 [B800000000000000]      	dq ql_print_int_base8  ; o
    42 000002F8 [0800000000000000]      	dq ql_empty_function
    43 00000300 [0800000000000000]      	dq ql_empty_function
    44 00000308 [0800000000000000]      	dq ql_empty_function
    45 00000310 [6D02000000000000]      	dq ql_print_str        ; s
    46 00000318 [0800000000000000]      	dq ql_empty_function
    47 00000320 [0800000000000000]      	dq ql_empty_function
    48 00000328 [0800000000000000]      	dq ql_empty_function
    49 00000330 [0800000000000000]      	dq ql_empty_function
    50 00000338 [5601000000000000]      	dq ql_print_int_base16 ; x
    51                                  
    52                                  ; Load floating-point arguments from xmm registers.
    53                                  ql_print_fmt_next_float__jump_table:
    54 00000340 [4003000000000000]      	dq ql_print_fmt_next_float.from_xmm0
    55 00000348 [4703000000000000]      	dq ql_print_fmt_next_float.from_xmm1
    56 00000350 [4E03000000000000]      	dq ql_print_fmt_next_float.from_xmm2
    57 00000358 [5503000000000000]      	dq ql_print_fmt_next_float.from_xmm3
    58 00000360 [5C03000000000000]      	dq ql_print_fmt_next_float.from_xmm4
    59 00000368 [6303000000000000]      	dq ql_print_fmt_next_float.from_xmm5
    60 00000370 [6A03000000000000]      	dq ql_print_fmt_next_float.from_xmm6
    61 00000378 [7103000000000000]      	dq ql_print_fmt_next_float.from_xmm7
    62                                  
    63                                  section .text
    64                                  
    65                                  ; Expose library functions
    66                                  global ql_str_length
    67                                  global ql_flush
    68                                  global ql_print_char
    69                                  global ql_print_fmt
    70                                  global ql_print_str
    71                                  global ql_exit
    72                                  global ql_print_int_base2
    73                                  global ql_print_int_base8
    74                                  global ql_print_int_base10
    75                                  global ql_print_int_base16
    76                                  
    77                                  ; Exit from program
    78                                  ; CONV: SYSTEM-V 64
    79                                  ; IN:
    80                                  ;	exit code: RDI
    81                                  ql_exit:
    82 00000000 B83C000000              	mov rax, 60
    83 00000005 0F05                    	syscall
    84 00000007 C3                      	ret
    85                                  
    86                                  ; Does nothing
    87                                  ql_empty_function:
    88 00000008 C3                      	ret
    89                                  
    90                                  ; Flush output buffer
    91                                  ; CONV: SYSTEM-V 64
    92                                  ; USES:
    93                                  ;	RAX (= 0)
    94                                  ;	RDI (= 1)
    95                                  ;	RSI (= ql_out_buffer)
    96                                  ;	RDX (= *ql_out_buffer_current_len)
    97                                  ql_flush:
    98 00000009 488B0425[00020000]      	mov rax, [ql_out_buffer_current_len]
    99                                  
   100                                  	; Omit empty flush)
   101 00000011 4885C0                  	test rax, rax
   102 00000014 7429                    	jz .end
   103                                  
   104                                  	; Display out buffer
   105 00000016 B801000000              	mov rax, 1
   106 0000001B BF01000000              	mov rdi, 1
   107 00000020 48BE-                   	mov rsi, ql_out_buffer
   107 00000022 [0000000000000000] 
   108 0000002A 488B1425[00020000]      	mov rdx, [ql_out_buffer_current_len]
   109 00000032 0F05                    	syscall
   110                                  
   111                                  	; Clear out buffer
   112 00000034 4831C0                  	xor rax, rax
   113 00000037 48890425[00020000]      	mov [ql_out_buffer_current_len], rax
   114                                  
   115                                  .end:
   116 0000003F C3                      	ret
   117                                  
   118                                  ; Calculate string length
   119                                  ; CONV: SYSTEM-V 64
   120                                  ; IN:
   121                                  ;	string ptr - RDI
   122                                  ; OUT:
   123                                  ;	RAX (= string length)
   124                                  ; USES:
   125                                  ;	RSI (= 0)
   126                                  ;	RDI (= _RDI)
   127                                  ql_str_length:
   128 00000040 4889F8                  	mov rax, rdi
   129                                  
   130                                  .continue:
   131 00000043 48FFC7                  	inc rdi
   132 00000046 408A37                  	mov sil, [rdi]
   133 00000049 4084F6                  	test sil, sil
   134 0000004C 75F5                    	jnz .continue
   135                                  
   136 0000004E 4897                    	xchg rdi, rax
   137 00000050 4829F8                  	sub rax, rdi
   138 00000053 C3                      	ret
   139                                  
   140                                  ; My putchar function
   141                                  ; CONV: SYSTEM-V 64
   142                                  ; IN:
   143                                  ;	character to print - DIL
   144                                  ; USES:
   145                                  ;	R8
   146                                  ;	DIL
   147                                  ql_print_char:
   148                                  	; bl - char to print - lower byte of RDI register.
   149 00000054 4C8B0425[00020000]      	mov r8, [ql_out_buffer_current_len]
   150                                  
   151                                  	; Flush output buffer if it's filled
   152 0000005C 4981F800020000          	cmp r8, ql_out_buffer_len
   153 00000063 720B                    	jb .no_flush
   154                                  
   155                                  	; This function call is unlikely, so it's ok to do this here
   156 00000065 50                      	push rax
   157 00000066 56                      	push rsi
   158 00000067 52                      	push rdx
   159 00000068 E89CFFFFFF              	call ql_flush
   160 0000006D 5A                      	pop rdx
   161 0000006E 5E                      	pop rsi
   162 0000006F 58                      	pop rax
   163                                  
   164                                  .no_flush:
   165 00000070 4188B8[00000000]        	mov [r8 + ql_out_buffer], dil
   166 00000077 FF0425[00020000]        	inc dword [ql_out_buffer_current_len]
   167 0000007E C3                      	ret
   168                                  
   169                                  ; Print binary integer
   170                                  ; CONV: SYSTEM-V 64
   171                                  ; IN:
   172                                  ;	number to print - RDI
   173                                  ; USES:
   174                                  ;	RAX
   175                                  ;	RDI
   176                                  ;	RSI
   177                                  ;	R8
   178                                  ql_print_int_base2:
   179 0000007F 4889F8                  	mov rax, rdi
   180 00000082 48BF-                   	mov rdi, ql_number_print_buffer + ql_number_print_buffer_len - 1
   180 00000084 [8702000000000000] 
   181                                  
   182 0000008C 4885C0                  	test rax, rax
   183 0000008F 7508                    	jnz .continue
   184                                  
   185                                  	; handle zero case
   186 00000091 48FFCF                  	dec rdi
   187 00000094 C60730                  	mov byte [rdi], 30h
   188 00000097 EB19                    	jmp .end
   189                                  
   190                                  .continue:
   191 00000099 4889C6                  	mov rsi, rax
   192 0000009C 4883E601                	and rsi, 1
   193 000000A0 4883C630                	add rsi, 30h
   194                                  
   195 000000A4 48FFCF                  	dec rdi
   196 000000A7 408837                  	mov [rdi], sil
   197                                  
   198 000000AA 48D1E8                  	shr rax, 1
   199                                  
   200 000000AD 4885C0                  	test rax, rax
   201 000000B0 75E7                    	jnz .continue
   202                                  
   203                                  .end:
   204 000000B2 E8B6010000              	call ql_print_str
   205 000000B7 C3                      	ret
   206                                  
   207                                  ; Print binary integer
   208                                  ; CONV: SYSTEM-V 64
   209                                  ; IN:
   210                                  ;	number to print - RDI
   211                                  ; USES:
   212                                  ;	RAX
   213                                  ;	RDI
   214                                  ;	RSI
   215                                  ;	R8
   216                                  ql_print_int_base8:
   217 000000B8 4889F8                  	mov rax, rdi
   218 000000BB 48BF-                   	mov rdi, ql_number_print_buffer + ql_number_print_buffer_len - 1
   218 000000BD [8702000000000000] 
   219                                  
   220 000000C5 4885C0                  	test rax, rax
   221 000000C8 7508                    	jnz .continue
   222                                  
   223                                  	; handle zero case
   224 000000CA 48FFCF                  	dec rdi
   225 000000CD C60730                  	mov byte [rdi], 30h
   226 000000D0 EB1A                    	jmp .end
   227                                  
   228                                  .continue:
   229 000000D2 4889C6                  	mov rsi, rax
   230 000000D5 4883E607                	and rsi, 7
   231 000000D9 4883C630                	add rsi, 30h
   232                                  
   233 000000DD 48FFCF                  	dec rdi
   234 000000E0 408837                  	mov [rdi], sil
   235                                  
   236 000000E3 48C1E803                	shr rax, 3
   237                                  
   238 000000E7 4885C0                  	test rax, rax
   239 000000EA 75E6                    	jnz .continue
   240                                  
   241                                  .end:
   242 000000EC E87C010000              	call ql_print_str
   243 000000F1 C3                      	ret
   244                                  
   245                                  ; Fill int buffer with base10 integer representation
   246                                  ; CONV: SYSTEM-V 64
   247                                  ; IN:
   248                                  ;	number to fill buffer with - RDI
   249                                  ; USES:
   250                                  ;	RAX
   251                                  ;	RDX
   252                                  ;	RDI (= string start)
   253                                  ;	RSI
   254                                  ;	R8
   255                                  ql_fill_int_base10:
   256 000000F2 4831D2                  	xor rdx, rdx
   257                                  
   258 000000F5 4889F8                  	mov rax, rdi
   259 000000F8 48BF-                   	mov rdi, ql_number_print_buffer + ql_number_print_buffer_len - 1
   259 000000FA [8702000000000000] 
   260                                  
   261 00000102 4885C0                  	test rax, rax
   262 00000105 7508                    	jnz .nonzero
   263                                  
   264                                  	; Write '0' character and exit
   265 00000107 48FFCF                  	dec rdi
   266 0000010A C60730                  	mov byte [rdi], 0x30
   267 0000010D EB3B                    	jmp .end
   268                                  
   269                                  .nonzero:
   270                                  
   271                                  	; Save RAX to decide if '-' character is needed
   272 0000010F 50                      	push rax
   273                                  
   274                                  	; Negate rax if it is negative
   275 00000110 4883F800                	cmp rax, 0
   276 00000114 7F03                    	jg .continue
   277 00000116 48F7D8                  	neg rax
   278                                  
   279                                  .continue:
   280 00000119 41B80A000000            	mov r8, 0xA
   281                                  
   282 0000011F 4889C6                  	mov rsi, rax
   283 00000122 49F7F8                  	idiv r8
   284 00000125 49F7E8                  	imul r8
   285 00000128 4829C6                  	sub rsi, rax
   286 0000012B 49F7F8                  	idiv r8
   287                                  
   288 0000012E 4883C630                	add rsi, 0x30
   289                                  
   290 00000132 48FFCF                  	dec rdi
   291 00000135 408837                  	mov [rdi], sil
   292                                  
   293                                  .test:
   294 00000138 4885C0                  	test rax, rax
   295 0000013B 75DC                    	jnz .continue
   296                                  
   297                                  	; Load RDI to write '-' character
   298 0000013D 58                      	pop rax
   299 0000013E 4883F800                	cmp rax, 0
   300 00000142 7D06                    	jge .end
   301                                  
   302                                  	; Write '-' character
   303 00000144 48FFCF                  	dec rdi
   304 00000147 C6072D                  	mov byte [rdi], 0x2D
   305                                  
   306                                  .end:
   307 0000014A C3                      	ret
   308                                  
   309                                  ; Print binary integer
   310                                  ; CONV: SYSTEM-V 64
   311                                  ; IN:
   312                                  ;	number to print - RDI
   313                                  ; USES:
   314                                  ;	RAX
   315                                  ;	RDX
   316                                  ;	RDI
   317                                  ;	RSI
   318                                  ;	R8
   319                                  ql_print_int_base10:
   320 0000014B E8A2FFFFFF              	call ql_fill_int_base10
   321 00000150 E818010000              	call ql_print_str
   322 00000155 C3                      	ret
   323                                  
   324                                  ; Print binary integer
   325                                  ; CONV: SYSTEM-V 64
   326                                  ; IN:
   327                                  ;	number to print - RDI
   328                                  ; USES:
   329                                  ;	RAX
   330                                  ;	RDI
   331                                  ;	RSI
   332                                  ;	R8
   333                                  ql_print_int_base16:
   334 00000156 4889F8                  	mov rax, rdi
   335 00000159 48BF-                   	mov rdi, ql_number_print_buffer + ql_number_print_buffer_len - 1
   335 0000015B [8702000000000000] 
   336                                  
   337 00000163 4885C0                  	test rax, rax
   338 00000166 7508                    	jnz .continue
   339                                  
   340                                  	; handle zero case
   341 00000168 48FFCF                  	dec rdi
   342 0000016B C60730                  	mov byte [rdi], 30h
   343 0000016E EB24                    	jmp .end
   344                                  
   345                                  .continue:
   346 00000170 4889C6                  	mov rsi, rax
   347                                  
   348                                  	; Perform bit more clever
   349 00000173 4883E60F                	and rsi, 0xF
   350                                  
   351 00000177 4883FE0A                	cmp rsi, 0xA
   352 0000017B 7C04                    	jl .number
   353 0000017D 4883C607                	add rsi, 0x7
   354                                  .number:
   355 00000181 4883C630                	add rsi, 30h
   356                                  
   357 00000185 48FFCF                  	dec rdi
   358 00000188 408837                  	mov [rdi], sil
   359                                  
   360 0000018B 48C1E804                	shr rax, 4
   361 0000018F 4885C0                  	test rax, rax
   362 00000192 75DC                    	jnz .continue
   363                                  
   364                                  .end:
   365 00000194 E8D4000000              	call ql_print_str
   366 00000199 C3                      	ret
   367                                  
   368                                  ; Print float (alias to ql_print_int_base16 now)
   369                                  ; IN:
   370                                  ;	number to print - rdi
   371                                  ; USES:
   372                                  ;	RAX
   373                                  ;	RDX
   374                                  ;	RDI
   375                                  ;	RSI
   376                                  ;	R8
   377                                  ; TODO:
   378                                  ;	BUILD ACTUAL FLOAT PRINTING FUNCTION
   379                                  ql_print_float:
   380                                  	; rdi = i64(float(rdi) * 10000.0)
   381 0000019A 66480F7EC8              	movq rax, xmm1
   382 0000019F 66480F6EC7              	movq xmm0, rdi
   383 000001A4 48BA000000000088C3-     	mov rdx, 0x40C3880000000000 ; bitcast<i64>(10000.0lf)
   383 000001AD 40                 
   384 000001AE 66480F6ECA              	movq xmm1, rdx
   385 000001B3 F20F59C1                	mulsd xmm0, xmm1
   386 000001B7 66480F6EC8              	movq xmm1, rax
   387 000001BC F2480F2DF8              	cvtsd2si rdi, xmm0
   388                                  
   389 000001C1 4883FF00                	cmp rdi, 0
   390 000001C5 7D11                    	jge .greater_zero
   391                                  
   392                                  	; Print '-'
   393 000001C7 4889FE                  	mov rsi, rdi
   394 000001CA 40B72D                  	mov dil, 0x2D
   395 000001CD E882FEFFFF              	call ql_print_char
   396 000001D2 4889F7                  	mov rdi, rsi
   397 000001D5 48F7DF                  	neg rdi
   398                                  
   399                                  	; Here RDI is positive
   400                                  .greater_zero:
   401                                  
   402                                  	; Check if RDI has integer part
   403 000001D8 4881FF10270000          	cmp rdi, 10000
   404 000001DF 7C3F                    	jl .no_int
   405                                  
   406                                  	; Write integer part
   407 000001E1 E80CFFFFFF              	call ql_fill_int_base10
   408                                  
   409                                  	; uugh
   410 000001E6 408A3425[85020000]      	mov sil, [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 1]
   411 000001EE 40883425[86020000]      	mov [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 0], sil
   412 000001F6 408A3425[84020000]      	mov sil, [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 2]
   413 000001FE 40883425[85020000]      	mov [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 1], sil
   414 00000206 408A3425[83020000]      	mov sil, [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 3]
   415 0000020E 40883425[84020000]      	mov [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 2], sil
   416 00000216 C60425[83020000]2E      	mov byte [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 3], 0x2E
   417                                  
   418 0000021E EB47                    	jmp .print	
   419                                  .no_int:
   420                                  
   421                                  	; Write '0.00000'
   422 00000220 C60425[80020000]30      	mov byte [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 6], 0x30
   423 00000228 C60425[81020000]2E      	mov byte [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 5], 0x2E
   424 00000230 C60425[82020000]30      	mov byte [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 4], 0x30
   425 00000238 C60425[83020000]30      	mov byte [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 3], 0x30
   426 00000240 C60425[84020000]30      	mov byte [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 2], 0x30
   427 00000248 C60425[85020000]30      	mov byte [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 1], 0x30
   428 00000250 C60425[86020000]30      	mov byte [ql_number_print_buffer + ql_number_print_buffer_len - 2 - 0], 0x30
   429                                  
   430                                  	; Call fill function
   431 00000258 E895FEFFFF              	call ql_fill_int_base10
   432 0000025D 48BF-                   	mov rdi, ql_number_print_buffer + ql_number_print_buffer_len - 8
   432 0000025F [8002000000000000] 
   433                                  
   434                                  .print:
   435 00000267 E801000000              	call ql_print_str
   436 0000026C C3                      	ret
   437                                  
   438                                  ; Print string (new new implementation)
   439                                  ; CONV: SYSTEM-V 64
   440                                  ; IN:
   441                                  ;	string to print (null-terminated) - RDI
   442                                  ; USES:
   443                                  ;	RSI
   444                                  ;	RDI
   445                                  ;	RAX
   446                                  ;	RDX
   447                                  ql_print_str:
   448                                  	; Calculate string length
   449 0000026D E8CEFDFFFF              	call ql_str_length
   450                                  
   451                                  	; Get out buffer rest count
   452 00000272 BE00040000              	mov rsi, ql_out_buffer_len * 2
   453 00000277 482B3425[00020000]      	sub rsi, [ql_out_buffer_current_len]
   454                                  
   455                                  	; Check if string is TOO long
   456 0000027F 4839F0                  	cmp rax, rsi
   457 00000282 0F838E000000            	jae .very_long_str
   458                                  
   459                                  	; rsi = out_buffer_len - out_buffer_current_len
   460 00000288 4881EE00020000          	sub rsi, ql_out_buffer_len
   461                                  
   462                                  	; Test if the string can be fully written to out buffer
   463 0000028F 4839F0                  	cmp rax, rsi
   464 00000292 732A                    	jae .long_str
   465                                  
   466                                  .short_str:
   467 00000294 48BE-                   	mov rsi, ql_out_buffer
   467 00000296 [0000000000000000] 
   468 0000029E 48033425[00020000]      	add rsi, [ql_out_buffer_current_len]
   469 000002A6 48010425[00020000]      	add [ql_out_buffer_current_len], rax
   470                                  
   471                                  .short_loop_start:
   472 000002AE 8A17                    	mov dl, [rdi]
   473 000002B0 48FFC7                  	inc rdi
   474 000002B3 8816                    	mov [rsi], dl
   475 000002B5 48FFC6                  	inc rsi
   476                                  
   477                                  .short_test:
   478 000002B8 48FFC8                  	dec rax
   479 000002BB 75F1                    	jnz .short_loop_start
   480                                  
   481 000002BD C3                      	ret
   482                                  
   483                                  .long_str: ; Write start, flush, write rest
   484 000002BE 48BE-                   	mov rsi, ql_out_buffer
   484 000002C0 [0000000000000000] 
   485 000002C8 48033425[00020000]      	add rsi, [ql_out_buffer_current_len]
   486                                  
   487                                  	; Fill out buffer
   488                                  .long_loop_start:
   489 000002D0 8A17                    	mov dl, [rdi]
   490 000002D2 48FFC7                  	inc rdi
   491 000002D5 8816                    	mov [rsi], dl
   492 000002D7 48FFC6                  	inc rsi
   493                                  
   494                                  .long_test:
   495 000002DA 4881FE[00020000]        	cmp rsi, ql_out_buffer_end
   496 000002E1 72ED                    	jb .long_loop_start
   497                                  
   498                                  	; Compute rest length
   499 000002E3 480500020000            	add rax, ql_out_buffer_len
   500 000002E9 482B0425[00020000]      	sub rax, [ql_out_buffer_current_len]
   501                                  
   502                                  	; Write current len
   503 000002F1 48C70425[00020000]-     	mov qword [ql_out_buffer_current_len], ql_out_buffer_len
   503 000002F9 00020000           
   504                                  
   505                                  	; Flush
   506 000002FD 50                      	push rax
   507 000002FE 57                      	push rdi
   508 000002FF E805FDFFFF              	call ql_flush
   509 00000304 5F                      	pop rdi
   510 00000305 58                      	pop rax
   511                                  
   512                                  	; Write rest
   513                                  .long_end_start:
   514 00000306 8A17                    	mov dl, [rdi]
   515 00000308 48FFC7                  	inc rdi
   516 0000030B 8816                    	mov [rsi], dl
   517 0000030D 48FFC6                  	inc rsi
   518                                  .long_end_test:
   519 00000310 48FFC8                  	dec rax
   520 00000313 75F1                    	jnz .long_end_start
   521                                  
   522                                  	; Exit
   523 00000315 C3                      	ret
   524                                  
   525                                  .very_long_str: ; Flush, write by systemcall
   526                                  
   527                                  	; Flush string buffer
   528 00000316 50                      	push rax
   529 00000317 57                      	push rdi
   530 00000318 E8ECFCFFFF              	call ql_flush
   531 0000031D 5F                      	pop rdi
   532 0000031E 58                      	pop rax
   533                                  
   534                                  	; Write string by systemcall
   535 0000031F 4889C2                  	mov rdx, rax ; Buffer length
   536 00000322 4889FE                  	mov rsi, rdi ; Buffer pointer
   537 00000325 BF01000000              	mov rdi, 1   ; File descriptor
   538 0000032A B801000000              	mov rax, 1   ; Systemcall index
   539 0000032F 0F05                    	syscall
   540                                  
   541 00000331 C3                      	ret
   542                                  
   543                                  ; Get next float-point parameter
   544                                  ; IN:
   545                                  ;	float index - R9
   546                                  ; OUT:
   547                                  ;	float value - RDI
   548                                  ql_print_fmt_next_float:
   549 00000332 4983F908                	cmp r9, 8
   550 00000336 7D40                    	jge .from_stack
   551                                  
   552 00000338 42FF24CD[40030000]      	jmp [r9 * 8 + ql_print_fmt_next_float__jump_table]
   553                                  .from_xmm0:
   554 00000340 66480F7EC7              	movq rdi, xmm0
   555 00000345 EB42                    	jmp .end
   556                                  .from_xmm1:
   557 00000347 66480F7ECF              	movq rdi, xmm1
   558 0000034C EB3B                    	jmp .end
   559                                  .from_xmm2:
   560 0000034E 66480F7ED7              	movq rdi, xmm2
   561 00000353 EB34                    	jmp .end
   562                                  .from_xmm3:
   563 00000355 66480F7EDF              	movq rdi, xmm3
   564 0000035A EB2D                    	jmp .end
   565                                  .from_xmm4:
   566 0000035C 66480F7EE7              	movq rdi, xmm4
   567 00000361 EB26                    	jmp .end
   568                                  .from_xmm5:
   569 00000363 66480F7EEF              	movq rdi, xmm5
   570 00000368 EB1F                    	jmp .end
   571                                  .from_xmm6:
   572 0000036A 66480F7EF7              	movq rdi, xmm6
   573 0000036F EB18                    	jmp .end
   574                                  .from_xmm7:
   575 00000371 66480F7EFF              	movq rdi, xmm7
   576 00000376 EB11                    	jmp .end
   577                                  
   578                                  .from_stack:
   579 00000378 49C1E103                	shl r9, 3
   580 0000037C 4889E7                  	mov rdi, rsp
   581 0000037F 4C01CF                  	add rdi, r9
   582 00000382 49C1E903                	shr r9, 3
   583                                  	; load froms tack
   584 00000386 488B3F                  	mov rdi, [rdi]
   585                                  	
   586                                  .end:
   587                                  
   588 00000389 C3                      	ret
   589                                  
   590                                  ; My formatted print function
   591                                  ; CONV: SYSTEM-V
   592                                  ; IN:
   593                                  ;	format string - rdi
   594                                  ; USES:
   595                                  ;	...
   596                                  ql_print_fmt:
   597                                  	; Save stack value
   598 0000038A 4989E2                  	mov r10, rsp
   599                                  
   600                                  	; Load return pointer from stack
   601 0000038D 58                      	pop rax
   602                                  
   603                                  	; Write registers to stack
   604 0000038E 4151                    	push r9
   605 00000390 4150                    	push r8
   606 00000392 51                      	push rcx
   607 00000393 52                      	push rdx
   608 00000394 56                      	push rsi
   609                                  
   610                                  	; Save return pointer and initial stack address
   611 00000395 4152                    	push r10
   612 00000397 50                      	push rax
   613                                  
   614                                  	; R9 - float point index
   615 00000398 4D31C9                  	xor r9, r9
   616                                  
   617                                  	; R10 - string pointer
   618 0000039B 4989FA                  	mov r10, rdi
   619                                  
   620                                  	; R11 - current argument pointer
   621 0000039E 4989E3                  	mov r11, rsp
   622 000003A1 4983C308                	add r11, 8
   623                                  
   624                                  .main_loop:
   625                                  	; AL = *R10
   626 000003A5 418A02                  	mov al, [r10]
   627 000003A8 49FFC2                  	inc r10
   628                                  
   629                                  	; Test for stirng end
   630 000003AB 84C0                    	test al, al
   631 000003AD 7445                    	jz .end
   632                                  
   633                                  	; Go to '%' handler.
   634 000003AF 3C25                    	cmp al, 25h
   635 000003B1 740A                    	je .handle_fmt
   636                                  
   637                                  .print_char:
   638                                  
   639                                  	; Further optimization?
   640 000003B3 4088C7                  	mov dil, al
   641 000003B6 E899FCFFFF              	call ql_print_char
   642                                  
   643                                  	; Continue
   644 000003BB EBE8                    	jmp .main_loop
   645                                  
   646                                  .handle_fmt:
   647                                  
   648                                  	; %c, %s, %d, %x, %o, %b, %%
   649                                  	; a b c d e f g h i j k l m n o p q r s t u v w x y z
   650                                  	;   - - -                     -       -         -    
   651                                  	; b..x jump table
   652                                  
   653                                  	; Load character into RAX
   654 000003BD 4831C0                  	xor rax, rax
   655 000003C0 418A02                  	mov al, [r10]
   656 000003C3 49FFC2                  	inc r10
   657                                  
   658                                  	; Test for lack of next character
   659 000003C6 84C0                    	test al, al
   660 000003C8 742A                    	jz .end
   661                                  
   662                                  	; Test for "%%" combination
   663 000003CA 3C25                    	cmp al, 0x25
   664 000003CC 74E5                    	je .print_char
   665                                  
   666                                  	; Check for jump table usability
   667 000003CE 3C62                    	cmp al, 0x62
   668 000003D0 72D3                    	jb .main_loop
   669 000003D2 3C78                    	cmp al, 0x78
   670 000003D4 77CF                    	ja .main_loop
   671                                  
   672 000003D6 3C66                    	cmp al, 0x66
   673 000003D8 750A                    	jne .load_arg_stack
   674                                  
   675                                  	; Load next float
   676 000003DA E853FFFFFF              	call ql_print_fmt_next_float
   677 000003DF 49FFC1                  	inc r9
   678                                  
   679 000003E2 EB07                    	jmp .call
   680                                  
   681                                  .load_arg_stack:
   682                                  	; Load next argument into rcx
   683 000003E4 4983C308                	add r11, 8
   684 000003E8 498B3B                  	mov rdi, [r11]
   685                                  .call:
   686                                  
   687                                  	; Use jump table!
   688 000003EB FF14C5[78FFFFFF]        	call [rax * 8 + ql_print_fmt__jump_table - 62h * 8]
   689 000003F2 EBB1                    	jmp .main_loop
   690                                  
   691                                  .end:
   692                                  
   693                                  	; Restore stack
   694 000003F4 58                      	pop rax
   695 000003F5 5C                      	pop rsp
   696 000003F6 50                      	push rax
   697                                  
   698 000003F7 C3                      	ret
   699                                  
   700                                  ; ql.s
